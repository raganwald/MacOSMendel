/** *   *  @(#) Crawler.java *   *  @author   Reginald Braithwaite-Lee *  @version  1.0 */package codestorm.publisher;import codestorm.mendel.*;import codestorm.builders.*;import java.io.*;import java.util.*; public class Crawler implements Runnable {private Thread crawlThread;private MendelWindow myWindow;private String path;private static Vector literalSuffixes;static {	literalSuffixes = new Vector();	String literalPrefix = Defaults.getProperty(Defaults.kLiteralPrefix,"");	String eachLiteral = "";	int i = 1;	while ( !(eachLiteral = Defaults.getProperty( literalPrefix + String.valueOf(i++), "" )).equals("") )		literalSuffixes.addElement(eachLiteral);}public Crawler(String s, MendelWindow gw) {	path = s;	myWindow = gw;	crawlThread = new Thread(this,path);	crawlThread.start();}public void run () {	try {		long startTime = System.currentTimeMillis();		File outputDir = new File(Defaults.getProperty(Defaults.kTopOutDirectory));		if ( outputDir.exists() )			this.resetFolder(outputDir);		this.crawlFolder(path);		long elapsedSeconds = (System.currentTimeMillis() - startTime) / 1000;		long elapsedMinutes = elapsedSeconds / 60;		elapsedSeconds = elapsedSeconds % 60;		if ( elapsedSeconds == 60 )			elapsedSeconds = 0;		myWindow.println (			"Elapsed Time: "			+ (( elapsedMinutes > 0 ) ? String.valueOf(elapsedMinutes) + " minutes " : "")			+ String.valueOf(elapsedSeconds) + " seconds"		);	}	catch (Exception e) {		myWindow.println(e.toString());	}}protected void crawlFolder (String aPathString) {	this.crawlFolder(new File(aPathString));}protected void crawlFolder (File aDirectory) {	String				inPath;	String				outPath;	String[]			myMembers;	AbstractMember	thisContainer;		if ( aDirectory.isDirectory() ) {		File				inFolderFile;		File				outFolderFile;		RandomAccessFile	indexFile;				inPath = aDirectory.getAbsolutePath();		try {			inFolderFile = new File(inPath);			thisContainer = new ManufacturedMember(inFolderFile);			outPath = thisContainer.getProperty(AbstractMember.keyOutPath,Defaults.getProperty(Defaults.kTopOutDirectory)+inFolderFile.getPath());			outFolderFile = new File(outPath);			if ( outFolderFile.mkdirs() ) {				String publishString = thisContainer.getProperty(Defaults.getProperty(Defaults.kPublishFlag),"YES");				if ( publishString.length() > 0 && ((publishString.charAt(0) == 'y') || (publishString.charAt(0) == 'Y')) ) {					try {						String fullOutPath = outPath + File.separator + Defaults.getProperty(Defaults.kIndexName) + Defaults.getProperty(Defaults.kHTMLSuffix);						myWindow.println("Rendering "+inFolderFile.getName());						indexFile = new RandomAccessFile( fullOutPath, "rw" );						String htmlRepresentation = thisContainer.asText().asHTMLString().toString();						indexFile.writeBytes( htmlRepresentation );						indexFile.close();						myWindow.println("Rendered "+String.valueOf(htmlRepresentation.length())+" bytes to "+fullOutPath);					}					catch (Exception e) {						myWindow.println("Failed to render "+inFolderFile.getName()+" because "+e.toString());					}				}								myMembers = aDirectory.list();				for (int i = 0; i < myMembers.length; i++) {					File memberFile = new File(inPath + File.separator + myMembers[i]);					if ( memberFile.isDirectory() )						this.crawlFolder(memberFile);					else if ( myMembers[i].startsWith(Defaults.getProperty(Defaults.kIndexName)) )						myWindow.println("Skipping index file "+memberFile.getPath());					else {						AbstractMember eachMember = new ManufacturedMember(memberFile);						publishString = eachMember.getProperty(Defaults.getProperty(Defaults.kPublishFlag),"YES");						if ( publishString.length() > 0 && ((publishString.charAt(0) == 'y') || (publishString.charAt(0) == 'Y')) ) {							try {								String memberMimeType = eachMember.getMIMEType();								if ( memberMimeType != null ) {									String outName;									myWindow.println("Rendering "+memberMimeType+" file "+memberFile.getName());									String memberName = eachMember.getProperty(AbstractMember.keyName,memberFile.getName());									int dotIndex = memberName.lastIndexOf(".");									if ( dotIndex < 0 )										outName = memberName + Defaults.getFileSuffix(memberMimeType);									else {										String actualSuffix = memberName.substring(dotIndex);										String indicatedMIMEType = Defaults.getMIMEType(actualSuffix);										if ( indicatedMIMEType == null )											outName = memberName.substring(0,dotIndex) + Defaults.getFileSuffix(memberMimeType);										else if ( memberMimeType.equals(Defaults.getProperty(Defaults.kMIMEHTML)) ) // HTML -- probably processing this											outName = memberName.substring(0,dotIndex) + Defaults.getFileSuffix(memberMimeType);										else if ( !(indicatedMIMEType.equalsIgnoreCase(memberMimeType)) ) {											myWindow.println("WARNING "+memberName+" seems to be "+indicatedMIMEType+" but it is actually "+memberMimeType);											outName = memberName.substring(0,dotIndex) + Defaults.getFileSuffix(memberMimeType);										}										else outName = memberName;									}									try {										InputStream inStream = eachMember.asMIMEStream();										File killIt = new File(outPath + File.separator + outName);										killIt.delete();										RandomAccessFile outFile = new RandomAccessFile( killIt.getPath(), "rw" );										myWindow.println("Copying "+memberName+" to "+killIt.getPath());										int bufSize = 2048;										byte[] buf = new byte[bufSize];										int actualBytes = 0;										try {											do {												if ( (actualBytes = inStream.read(buf)) > 0 )													outFile.write(buf, 0, actualBytes);											} while (actualBytes > 0);																					}										catch (IOException ioe) {											myWindow.println("Failed to copy "+memberName+" because "+ioe.toString());										}										finally {											inStream.close();											outFile.close();										}									}									catch (IOException ioe) {										myWindow.println("Failed to copy "+memberName+" because "+ioe.toString());									}									myWindow.println("Done rendering "+memberMimeType+" file "+memberFile.getName());								}								else myWindow.println("Skipping file "+memberFile.getPath()+" because it has no MIME type");							}							catch (Exception e) {								myWindow.println("Failed to render "+memberFile.getName()+" because "+e.toString());							}						}					}				}			}		}		catch (Exception e) {}	}}protected void resetFolder (File aDirectory) {	String		myPath;	String[]	myMembers;		if ( aDirectory.isDirectory() ) {		myPath = aDirectory.getAbsolutePath();		myMembers = aDirectory.list();		for (int i = 0; i < myMembers.length; i++) {			File memberFile = new File(myPath + File.separator + myMembers[i]);			if ( memberFile.isDirectory() )				this.resetFolder(memberFile);			else if ( memberFile.canWrite() )				memberFile.delete();		}			} else {};}}