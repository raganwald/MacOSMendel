/* * Copyright (c) 1996, 1997 Codestorm Inc. All rights reserved. * */package COM.codestorm.thunks;import java.io.*;import COM.codestorm.mendel.*;/* * This class is a ThunkTokenizer specific to the Mendel syntax. * */class ThunkTokenizer extends StreamTokenizer {public static final String endOfLineWord = "__EOL__";public static final String endOfFileWord = "__EOF__";public ThunkTokenizer (String s) {	this(new StringBufferInputStream(s));}/* * initializes a tokenizer from an inputstream * */public ThunkTokenizer (InputStream I) {	super(I);	this.resetSyntax();	this.eolIsSignificant(false);	this.slashStarComments(false);	this.slashSlashComments(false);	this.wordChars(0, 255);	this.wordChars('/', '/'); // path separators in various OS styles	this.wordChars('\\', '\\');	this.wordChars(':', ':');	this.whitespaceChars('#', '#'); // name separator	this.whitespaceChars(0, ' ');}public String currentWord() {	if (this.sval != null) {		return this.sval;	} else if (this.ttype == ThunkTokenizer.TT_NUMBER) {		return String.valueOf(this.nval);	} else if (this.ttype == ThunkTokenizer.TT_EOL) {		return ThunkTokenizer.endOfLineWord;	} else if (this.ttype == ThunkTokenizer.TT_EOF) {		return ThunkTokenizer.endOfFileWord;	} else {		return new Character((char) this.ttype).toString();	}}	}