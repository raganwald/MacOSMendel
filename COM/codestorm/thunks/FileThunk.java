/* * */package COM.codestorm.thunks;import java.io.*;import COM.codestorm.builders.*;import COM.codestorm.mendel.*;public class FileThunk implements AbstractThunk {static final String fileIdentifier = "file:";String myPath;public FileThunk (String s) {	myPath = (new File(s)).getPath();}public AbstractMember evaluate (AbstractMemberContainer m) throws MendelException {	try {		if ( myPath.charAt(0) == File.separatorChar )			return new ManufacturedMember(new File(myPath)); // memberEnvelope will close		else {			AbstractMemberContainer memberContainer = m;			String defaultPath = Defaults.getRootPath();			if ( !defaultPath.equals("") && !defaultPath.endsWith(String.valueOf(File.separatorChar)) )				defaultPath = defaultPath + String.valueOf(File.separatorChar);			boolean fTryContainer = true;			while ( fTryContainer ) {				String strPath = memberContainer.getProperty(AbstractMember.keyInPath, "");				if ( strPath.length() > 0 ) {					defaultPath = strPath + String.valueOf(File.separatorChar);					fTryContainer = false;				}				else {					try {						AbstractMemberContainer containerContainer = memberContainer.getStaticScope(MissingMember.Null);						if ( containerContainer == null )							fTryContainer = false;						else memberContainer = containerContainer;											}					catch (MendelException me) {						fTryContainer = false;					}				}			}			return new ManufacturedMember(new File(defaultPath + myPath));		}	}	catch (IOException ioe) {		throw new MendelException(ioe.getMessage());	}}public String toString () {	return "\""+FileThunk.fileIdentifier+myPath+"\"";}}