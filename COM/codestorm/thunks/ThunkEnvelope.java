/** * * A ThunkEnvelope is an envelope which can be wrapped around a thunkLetter. * A ThunkEnvelope is built by combining a ThunkChainEnvelope with a AbstractMember. * Copyright (c) 1996, 1997 Codestorm Inc. All rights reserved. ***/package COM.codestorm.thunks;import java.io.*;import java.util.*;import COM.codestorm.mendel.*;public final class ThunkEnvelope extends AbstractSuperEnvelope {private AbstractMemberContainer staticScope;private AbstractThunk thunkLetter;private String symbol = "";public ThunkEnvelope (String s, AbstractMemberContainer scope) throws IOException, MendelException {	thunkLetter = new ThunkChainEnvelope(symbol = s, staticScope = scope);}public ThunkEnvelope (AbstractThunk thunk, AbstractMemberContainer scope) throws MendelException {	thunkLetter = thunk;	staticScope = scope;	symbol = thunk.toString();}public ThunkEnvelope (AbstractThunk thunk) throws MendelException {	thunkLetter = thunk;	staticScope = null;	symbol = thunk.toString();}public AbstractThunk thunk () {	return thunkLetter;}public AbstractMemberContainer getStaticScope (MissingMember miss) throws MendelException {	return staticScope;}public void setStaticScope (AbstractMemberContainer scope) throws MendelException {	staticScope = scope;}public AbstractMember yourself () throws MendelException {	if ( staticScope != null )		return thunkLetter.evaluate(staticScope).yourself();	else throw new NoContainerException("ThunkEnvelopes must have a static scope");}public String symbol () {	return symbol;}}