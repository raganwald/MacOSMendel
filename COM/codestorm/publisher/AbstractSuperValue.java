/** * * AbstractSuperValue.java * * Copyright (c) 1997 Codestorm Inc. * * @author Reginald Braithwaite-Lee ***/package COM.codestorm.publisher;import java.util.*;import COM.objectspace.jgl.*;import COM.codestorm.mendel.*;abstract public class AbstractSuperValue implements AbstractValue {protected AbstractMember myMember;protected Container myPrecursors;public AbstractSuperValue () {	myMember = null;	myPrecursors = new HashSet();}public AbstractSuperValue (AbstractValue aValue) throws MendelException {	myMember = aValue.getMember();	myPrecursors = aValue.getPrecursors();}abstract public ValueType getValueType () throws MendelException;public void putMember (AbstractMember aMember) throws MendelException {	myMember = aMember;}public AbstractMember getMember () throws MendelException {	return myMember;}/** * * addPrecursor * * This is the 'recursive' interpretation. ***/public void addPrecursor (AbstractValue aValue) throws MendelException {	if ( aValue.getPrecursors().isEmpty() )		myPrecursors.add(aValue);	else {		Enumeration e = aValue.getPrecursors().elements();		while ( e.hasMoreElements() )			this.addPrecursor((AbstractValue) e.nextElement());	}}public Container getPrecursors () throws MendelException {	return myPrecursors;}public Container getPrecursors (ValueType aType) throws MendelException {	HashSet retSet = new HashSet();	Enumeration e = myPrecursors.elements();	while ( e.hasMoreElements() ) {		AbstractValue precursor = (AbstractValue) e.nextElement();		if ( precursor.getValueType().equals(aType) )			retSet.add(precursor);	}	return retSet;}/** * * mergePrecursor * * Answers a Variable merging the receiver with a precursor. ***/public AbstractValue mergePrecursor (AbstractValue aValue) throws MendelException {	AbstractValue clone = this.shallowCopy();	clone.addPrecursor(aValue);	return clone;}/** * * mergePrecursors * * Answers a Variable merging the receiver with a container of * precursors. ***/public AbstractValue mergePrecursors (Container aContainer) throws MendelException {	AbstractValue clone = this.shallowCopy();	Enumeration e = aContainer.elements();	while ( e.hasMoreElements() )		clone.addPrecursor((AbstractValue) e.nextElement());	return clone;}}