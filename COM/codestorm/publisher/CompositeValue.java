/** * * CompositeValue.java * * Copyright (c) 1997 Codestorm Inc. * * @author Reginald Braithwaite-Lee ***/package COM.codestorm.publisher;import java.util.*;import COM.objectspace.jgl.*;import COM.codestorm.mendel.*;public class CompositeValue extends AbstractSuperValue {/** * * CompositeValues determine their type dynamically by examining their * precursor set. * * The logic is: * * If any member of the precursor set is volatile, the composite is volatile. * If no members of the precursor set are volatile and any member is * transient, the composite is transient. * If no members of the precursor set are volatile or transient, the composite * is constant. ***/public ValueType getValueType () throws MendelException {	if ( !this.getPrecursors(ValueType.VOLATILE).isEmpty() )		return ValueType.VOLATILE;	else if ( !this.getPrecursors(ValueType.TRANSIENT).isEmpty() )		return ValueType.TRANSIENT;	else return ValueType.CONSTANT;}}