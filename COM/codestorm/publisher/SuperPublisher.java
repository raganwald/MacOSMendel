/** * * An SuperPublisher is the base class for publishers. * By default, it simply echos its members' publish subjects. * Superclasses must provide an URL for their members. ***/package COM.codestorm.publisher;import COM.codestorm.mendel.*;import java.util.*;import java.io.*;abstract public class SuperPublisher implements AbstractPublishStrategy {protected AbstractMember myMember = null;public SuperPublisher (AbstractMember aMember) {	myMember = aMember;	if ( myMember instanceof Observable )		((Observable) myMember).addObserver(this);	this.update((Observable) aMember,null);}abstract public AbstractTextMember getURLText () throws MendelException; // we don't do anything by default herepublic void update(Observable o, Object arg) {	try {		update();	}	catch (MendelException me) {		System.err.println(me.getMessage());	}}public void update() throws MendelException {	// default is to ignore updates. subclasses may override to do something}public AbstractTextMember asText () throws MendelException {	return myMember.asText();}public boolean isVolitile () throws MendelException {	return myMember.isVolitile();}public String getMIMEType () throws MendelException {	return myMember.getMIMEType();}public InputStream asMIMEStream () throws MendelException {	return myMember.asMIMEStream();}}