/** *   *  @(#) Crawler.java *   *  @author   Reginald Braithwaite-Lee *  @version  1.0 */package COM.codestorm.publisher;import COM.codestorm.mendel.*;import COM.codestorm.builders.*;import java.io.*;import java.util.*; public class Crawler implements Runnable {private Thread crawlThread;private MendelWindow myWindow;private String path;private static Vector literalSuffixes;static {	literalSuffixes = new Vector();	String literalPrefix = Defaults.getProperty(Defaults.kLiteralPrefix,"");	String eachLiteral = "";	int i = 1;	while ( !(eachLiteral = Defaults.getProperty( literalPrefix + String.valueOf(i++), "" )).equals("") )		literalSuffixes.addElement(eachLiteral);}public Crawler(String s, MendelWindow gw) {	path = s;	myWindow = gw;	crawlThread = new Thread(this,path);	crawlThread.start();}public void run () {	try {		long startTime = System.currentTimeMillis();		File outputDir = new File(Defaults.getProperty(Defaults.kTopOutDirectory));		if ( outputDir.exists() )			this.resetFolder(outputDir);		this.crawlFolder(path);		long elapsedSeconds = (System.currentTimeMillis() - startTime) / 1000;		long elapsedMinutes = elapsedSeconds / 60;		elapsedSeconds = elapsedSeconds % 60;		if ( elapsedSeconds == 60 )			elapsedSeconds = 0;		myWindow.println (			"Elapsed Time: "			+ (( elapsedMinutes > 0 ) ? String.valueOf(elapsedMinutes) + " minutes " : "")			+ String.valueOf(elapsedSeconds) + " seconds"		);	}	catch (Exception e) {		myWindow.println(e.toString());	}}protected void crawlFolder (String aPathString) {	this.crawlFolder(new File(aPathString));}protected void crawlFolder (File aDirectory) {	String				inPath;	String				outPath;	String[]			myMembers;	AbstractMember	thisContainer;		if ( aDirectory.isDirectory() ) {		File				inFolderFile;		File				outFolderFile;		RandomAccessFile	indexFile;				inPath = aDirectory.getAbsolutePath();		try {			inFolderFile = new File(inPath);			thisContainer = new ManufacturedMember(inFolderFile);			AbstractPublishStrategy containerStrategy = thisContainer.getPublishStrategy();			containerStrategy.update();						myMembers = aDirectory.list();			for (int i = 0; i < myMembers.length; i++) {				File memberFile = new File(inPath + File.separator + myMembers[i]);				if ( memberFile.isDirectory() )					this.crawlFolder(memberFile);				else if ( myMembers[i].startsWith(Defaults.getProperty(Defaults.kIndexName)) )					myWindow.println("Skipping index file "+memberFile.getPath());				else {					AbstractMember thisMember = new ManufacturedMember(memberFile);//					AbstractVariableStrategy vStrategy = thisMember.getVariableStrategy();//					if ( vStrategy instanceof OSFileVariable ) {//						System.err.println(((OSFileVariable) vStrategy).countObservers());//						((OSFileVariable) vStrategy).crawlFile();//						((OSFileVariable) vStrategy).notifyObservers(); // poor implementation--needs a mediator to perform mark-sweep//					}					// thisMember.getPublishStrategy().update();				}			}		}		catch (Exception e) {			System.err.println(e.getMessage());		}	}}protected void resetFolder (File aDirectory) {	String		myPath;	String[]	myMembers;		if ( aDirectory.isDirectory() ) {		myPath = aDirectory.getAbsolutePath();		myMembers = aDirectory.list();		for (int i = 0; i < myMembers.length; i++) {			File memberFile = new File(myPath + File.separator + myMembers[i]);			if ( memberFile.isDirectory() )				this.resetFolder(memberFile);			else if ( memberFile.canWrite() )				memberFile.delete();		}			} else {};}}