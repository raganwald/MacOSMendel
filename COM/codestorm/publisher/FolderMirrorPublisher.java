/** * * A FolderMirrorPublisher is a PublishStrategy which consists * of writing a folder and an index file of the member's stream * representation to a file in a mirror directory. ***/package COM.codestorm.publisher;import COM.codestorm.mendel.*;import COM.codestorm.builders.*;import java.util.*;import java.io.*;import COM.objectspace.jgl.*;public class FolderMirrorPublisher extends MirrorPublisher {public FolderMirrorPublisher (AbstractMember aMember) {	super(aMember);}public void update () throws MendelException {	String memberName = myMember.getProperty(AbstractMember.keyName);	HTMLString urlText = new HTMLString(Defaults.getProperty(Defaults.kTopOutUrl), myMember);	StringBuffer outPath = new StringBuffer(Defaults.getProperty(Defaults.kTopOutDirectory) + File.separator);	Enumeration e = this.getContainerChain().elements();	while ( e.hasMoreElements() ) {		AbstractMember eachContainer = (AbstractMember) e.nextElement();		if ( !eachContainer.equals(Root.instance()) ) {			String eachContainerName = eachContainer.getProperty(AbstractMember.keyName);			urlText.append(Defaults.toURLString(eachContainerName) + Defaults.getProperty(Defaults.kURLSeparator));			outPath.append(eachContainerName + File.separator);		}	}	urlText.append(Defaults.toURLString(memberName) + Defaults.getProperty(Defaults.kURLSeparator));	urlText.append(Defaults.getProperty(Defaults.kIndexName) + Defaults.getProperty(Defaults.kHTMLSuffix));		outPath.append(memberName + File.separator);	String containerPath = outPath.toString();	outPath.append(Defaults.getProperty(Defaults.kIndexName) + Defaults.getProperty(Defaults.kHTMLSuffix));		File mirrorFolder = new File(containerPath);	if ( !mirrorFolder.mkdirs() )		throw new PublisherException("Unable to create folder(s) "+containerPath);		myURL = urlText;	myFile = new File(outPath.toString());		try {		InputStream inStream = myMember.asMIMEStream();		myFile.delete();		RandomAccessFile outFile = new RandomAccessFile( myFile.getPath(), "rw" );		int bufSize = 2048;		byte[] buf = new byte[bufSize];		int actualBytes = 0;		try {			do {				if ( (actualBytes = inStream.read(buf)) > 0 )					outFile.write(buf, 0, actualBytes);			} while (actualBytes > 0);					}		catch (IOException ioe) {			throw new PublisherException("Failed to mirror "+memberName+" because "+ioe.toString());		}		finally {			inStream.close();			outFile.close();		}	}	catch (IOException ioe) {		throw new PublisherException("Failed to mirror "+memberName+" because "+ioe.toString());	}}}