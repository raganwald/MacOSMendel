package COM.codestorm.NAVajo;import COM.codestorm.mendel.*;import COM.codestorm.thunks.*;import COM.codestorm.builders.*;import java.awt.*;import java.io.*;import java.util.*;public class NAVajoWindow extends java.awt.Frame {MenuItem mi1_1, mi1_2, mi1_3;TextArea output;private static NAVajoWindow _instance;public static long fileLastMod = 0;public static final String kBatchName = "kBatchName";public static final String kWatchName = "kWatchName";public static long actualLastMod () {	File navFile = new File(Defaults.getRootPath()+File.separator+Defaults.getProperty(kWatchName));	if ( navFile.exists() )		return navFile.lastModified();	else return 0;}public NAVajoWindow() {    MenuBar mb;    Menu m1;    int wd = new Integer(Defaults.getProperty(Defaults.kWindowWidth)).intValue();    int ht = new Integer(Defaults.getProperty(Defaults.kWindowHeight)).intValue();    output = new TextArea(ht, wd);    output.setEditable(false);    setLayout(new BorderLayout()); //give max space to the output    add("Center", output);    //Build the menu bar.    mb = new MenuBar();    setMenuBar(mb);    //Build first menu in the menu bar.    //Specifying the second argument as true    //makes this a tear-off menu.    m1 = new Menu("File", true);    mb.add(m1);    mi1_1 = new MenuItem("Process "+Defaults.getProperty(kBatchName,"NAVajo.html"));    m1.add(mi1_1);    mi1_2 = new MenuItem("Save Factory Preferences");    m1.add(mi1_2);    mi1_3 = new MenuItem("Quit");    m1.add(mi1_3);    }public static NAVajoWindow instance () {	if ( _instance == null )		_instance = new NAVajoWindow();	return _instance;}public boolean handleEvent(Event event) {    if (event.id == Event.WINDOW_DESTROY) {         System.exit(0);    }       return super.handleEvent(event);}public boolean action(Event event, Object arg) {    if (event.target instanceof MenuItem) {        MenuItem mi=(MenuItem)(event.target);		if ( mi == mi1_1 ) {			try {				NAVajoWindow.processData();			}			catch (Exception e) {				println(e.toString());				return false;			}		}   		else if ( mi == mi1_2 )   			Defaults.saveDefaults();   		else if ( mi == mi1_3 )   			System.exit(0);   		else return false;    }    return true;}synchronized public static void processData () {	long startTime = System.currentTimeMillis();	try {		if ( NAVajoWindow.actualLastMod() != 0 ) {			String batchName = Defaults.getProperty(kBatchName,"NAVajo.html");			NAVajoWindow.instance().println("Processing "+batchName);			COM.codestorm.builders.Frame foo = new COM.codestorm.builders.Frame();			foo.putProperty(AbstractMember.keyName,"NAVajo");			AbstractThunk htmlThunk = new ThunkChainEnvelope("file:"+batchName);			AbstractMember memberToResolve = htmlThunk.evaluate(foo);			String stringToPrint = memberToResolve.asText().asHTMLString().toString();			NAVajoWindow.instance().println(stringToPrint);			int elapsedMillis = (int) (System.currentTimeMillis() - startTime);			int elapsedSeconds = elapsedMillis / 1000;			int elapsedMinutes = elapsedSeconds / 60;			elapsedSeconds = elapsedSeconds % 60;			if ( elapsedSeconds == 60 )				elapsedSeconds = 0;			NAVajoWindow.instance().println (				"Elapsed Time: "				+ (( elapsedMinutes > 0 ) ? String.valueOf(elapsedMinutes) + " minutes " : "")				+ String.valueOf(elapsedSeconds) + " seconds"			);		}	}	catch (MendelException me) {		System.err.println(me.getMessage());	}	catch (Exception e) {		NAVajoWindow.instance().println(e.getMessage());	}	finally {		NAVajoWindow.fileLastMod = NAVajoWindow.actualLastMod();	}}public void println (String str) {	output.appendText(str+"\n");}public static void main(String[] args) {		Defaults.putProperty(kBatchName,"NAVajo.html");		Defaults.putProperty(kWatchName,"funds.tbn");		Defaults.putProperty(Defaults.kTopInDirectory,"NAVajo In");		Defaults.putProperty(Defaults.kTopOutDirectory,"NAVajo Out");	    NAVajoWindow window = instance();		    window.setTitle("NAVajo Copyright 1997 GSFI Inc. and Codestorm Inc.");	    window.pack();	    window.show();	    	    processData();	    	    new Thread(new Watcher()).start();}}