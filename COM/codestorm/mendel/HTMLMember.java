/** * HTMLMembers decorate an HTMLThunk. This behaviour differs from a * ThunkMember: ThunkMembers are envelopes which 'export' the resulting * member to the client. * * An HTMLMember is a decorator which hides the resulting member, OTOH. * HTMLMembers manage their own static scope and variable strategy. * * @see HTMLThunk * @see HTMLString * @see ThunkMember * * Copyright (c) 1996, 1997 Codestorm Inc. All rights reserved. ***/package COM.codestorm.mendel;import java.io.*;import java.util.*;import COM.codestorm.thunks.*;import COM.codestorm.builders.HTMLString;import COM.codestorm.publisher.*;public final class HTMLMember extends AbstractSuperReference {public static String closeSERVER = "</SERVER>";private AbstractMemberContainer staticScope;private AbstractThunk thunkLetter;private HTMLMember (String str, AbstractMemberContainer scope) throws MendelException {	thunkLetter = new HTMLThunk(str);	staticScope = scope;}public static AbstractMember valueOf (String str, AbstractMemberContainer scope) throws MendelException {	if ( str.indexOf(closeSERVER) < 0 ) { // constant!		HTMLString hs = new HTMLString();		return hs.append(str);	}	else return new HTMLMember(str, scope);}public AbstractThunk thunk () {	return thunkLetter;}public AbstractMemberContainer getStaticScope (MissingMember miss) throws MendelException {	return staticScope;}public void setStaticScope (AbstractMemberContainer scope) throws MendelException {	staticScope = scope;}public AbstractMember decorates () throws MendelException {	return thunkLetter.evaluate(staticScope).yourself();}}