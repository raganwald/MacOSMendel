/** * * A ScriptLambda is a Lambda built from a script, featuring a let-style form. * * @see: Apply * * @author: Reginald Braithwaite-Lee ***/package COM.codestorm.mendel;import COM.objectspace.jgl.*;import COM.codestorm.builders.ManufacturedMember;import COM.codestorm.builders.Frame;import COM.codestorm.thunks.*;import java.util.*;import java.io.*;import COM.codestorm.lambdas.*;public class ScriptLambda extends AbstractSuperLambda {private Sequence expressionList;public ScriptLambda () {	paramNameList = new Array();	expressionList = new Array();}public ScriptLambda (Sequence expressions) {	paramNameList = new Array();	expressionList = expressions;}public ScriptLambda (Sequence paramList, Sequence expressions) {	paramNameList = paramList;	expressionList = expressions;}public void setParameterList (Sequence paramList) {	paramNameList = paramList;}public void setExpressionList (Sequence expressions) {	expressionList = expressions;}/** * * @param r the scope is used to evaluate unbound names * @param paramThunks a sequence of paramThunks to be bound. *        paramThunks should be a sequence of references * @return the result * * This is the key method for Lambdas. It is called by Applys. * * @see Apply#evaluate ***/public AbstractMember call (AbstractMemberContainer runtimeScope, Sequence paramThunks) throws MendelException {	AbstractMemberContainer bindings = getParameterScope(paramThunks);	Enumeration exE = expressionList.elements();	AbstractMember retVal = null;		while ( exE.hasMoreElements() )		retVal = ((AbstractThunk) exE.nextElement()).evaluate(bindings);	if ( retVal == null )		throw new MendelException("No expressions in ScriptLambda");	else return retVal;}public String toString () {	StringBuffer buf = new StringBuffer("[ ");	Enumeration exe = expressionList.elements();	Enumeration pare = paramNameList.elements();	if ( pare.hasMoreElements() ) {		while ( pare.hasMoreElements() )			buf.append( pare.nextElement() + " " );		buf.append("| ");	}	while ( exe.hasMoreElements() )		buf.append(exe.nextElement() + " ");	buf.append("]");	return buf.toString(); }}