/** * * Root.java * * Copyright (c) 1996, 1997 Codestorm Inc. All rights reserved. ***/package COM.codestorm.mendel;import java.util.*;import COM.codestorm.builders.*;import COM.codestorm.lambdas.*;import COM.codestorm.thunks.*;final class Root extends AbstractSuperDictionary {private static AbstractMemberContainer _singleton = null;private static Hashtable rootMembers = new Hashtable();public static AbstractMemberContainer instance () throws MendelException {	if ( _singleton == null ) {		_singleton = new Root();		// in future, primitives should be a folder full of classes		_singleton.putProperty(AbstractMember.keyName,"Root");		rootMembers.put("+", new Plus());		rootMembers.put("==", new Equals());		rootMembers.put("!=", new NotEquals());		rootMembers.put("&&", new And());		rootMembers.put("||", new Or());	}	return _singleton;}synchronized public AbstractMemberContainer getStaticScope (MissingMember miss) throws MendelException {	return (AbstractMemberContainer) miss.answer();}synchronized public void setStaticScope (AbstractMemberContainer m) throws MendelException {	throw new NoContainerException();}synchronized public void setParent (AbstractMemberContainer m) throws MendelException {	throw new NoParentException();}synchronized public AbstractMemberContainer getParent (MissingMember miss) throws MendelException {	return (AbstractMemberContainer) miss.answer();}public AbstractMember getMember (String s, MissingMember miss) throws MendelException {	AbstractMember a = (AbstractMember) rootMembers.get(s);	if ( a == null ) {		String className = s;		if ( className.startsWith(":") )			className = "_"+className.substring(1,2).toUpperCase() + className.substring(2);		else className = className.substring(0,1).toUpperCase() + className.substring(1);		if ( className.endsWith("?") || className.endsWith("!") )			className = className.substring(0,className.length()-1)+"_";		try {			Class theClass = Class.forName("codestorm.lambdas." + className);			a = (AbstractLambda) theClass.newInstance();		}		catch (Exception e) {			return (AbstractMember) miss.answer();		}		rootMembers.put(s,a);	}	return a;}public void putMember (AbstractMember member) throws MendelException {	throw new NoMemberException("The Root cannot have members added to it");}public void putMember (String key, AbstractMember member) throws MendelException {	throw new NoMemberException("The Root cannot have members added to it");}public int size () throws MendelException {	return rootMembers.size();}public Enumeration members () throws MendelException {	return rootMembers.elements();}public AbstractMemberCollection collect (FunctionBlock transformBlock) throws MendelException {	return new OrdCollection(members()).collect(transformBlock);}public AbstractMemberCollection select (ConditionalBlock conditionalBlock) throws MendelException {	return new OrdCollection(members()).select(conditionalBlock);}public AbstractMemberCollection reject (ConditionalBlock conditionalBlock) throws MendelException {	return new OrdCollection(members()).reject(conditionalBlock);}public AbstractMember yourself () throws MendelException {	return this;}}