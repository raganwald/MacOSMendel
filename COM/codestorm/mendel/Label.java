/** * Label is a special form of Envelope which support COW for properties. * It 'decorates' the putProperty and getProperty methods. * * Labels are used in MendelLISP for binding names to parameters when * constructing a temporary scope for a lambda evaluations. * * Copyright (c) 1996, 1997 Codestorm Inc. All rights reserved. * * @author: Reginald Braithwaite-Lee ***/package COM.codestorm.mendel;import java.util.*;public class Label extends AbstractSuperEnvelope {private MemberProperties properties = new MemberProperties();private AbstractMemberContainer container;private AbstractMember myLetter;public Label (AbstractMember aMember, AbstractMemberContainer aContainer, String aName) throws MendelException {	super();	myLetter = aMember;	this.setStaticScope(aContainer);	this.putProperty(AbstractMember.keyName, aName);}synchronized public String getProperty(String key) throws NoPropertyException {	String s = properties.getProperty(key);	if ( s == null ) {		try {			return this.yourself().getProperty(key);		}		catch (NoPropertyException npe) {			throw npe;		}		catch (MendelException me) {			throw new NoPropertyException();		}	} else return s;}synchronized public void putProperty (String key, String value) throws MendelException {	properties.put(key,value);}synchronized public AbstractMemberContainer getStaticScope (MissingMember miss) throws MendelException {	if ( container == null )		return this.yourself().getStaticScope(miss);	else return container;}synchronized public void setStaticScope (AbstractMemberContainer m) throws MendelException {	container = m;}public AbstractMember yourself () throws MendelException {	return myLetter.yourself();}}