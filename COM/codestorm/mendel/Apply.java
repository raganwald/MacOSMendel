/** * * An Apply is an expression which evaluates a lambda * block in a specified scope. * * @see: Lambda * * @author: Reginald Braithwaite-Lee ***/package COM.codestorm.mendel;import COM.objectspace.jgl.*;import COM.codestorm.thunks.*;import java.util.*;import COM.codestorm.lambdas.*;import COM.objectspace.jgl.*;public class Apply implements AbstractThunk {private Sequence params;public Apply (Sequence theParameters) throws MendelException {	params = theParameters;}/** * @param scope the scope is used to evaluate any references in the parameterlist * expression itself. The lambda uses receiverThunk as its scope, of course. * @return AbstractMember the result of evaluating the Lambda. * * @see Lambda#call ***/public AbstractMember evaluate (AbstractMemberContainer scope) throws MendelException {	AbstractMember firstMember;	AbstractLambda lambda;	Sequence paramThunks = new VectorArray();	Enumeration e = params.elements();	e = params.elements();	if ( !e.hasMoreElements() ) throw new MendelException("Apply without elements");	firstMember = ((AbstractThunk) e.nextElement()).evaluate(scope).yourself();		if ( firstMember instanceof AbstractLambda )		lambda = (AbstractLambda) firstMember;	else if ( firstMember instanceof AbstractMemberCollection ) {		if ( !e.hasMoreElements() ) throw new MendelException("Collection Lookup requires a Symbol");		AbstractThunk methodSelectorThunk = (AbstractThunk) e.nextElement();		AbstractMember method = methodSelectorThunk.evaluate((AbstractMemberContainer) firstMember).yourself();		if ( method instanceof AbstractLambda ) {			if ( !firstMember.equals(method.getStaticScope(MissingMember.Null)) ) {				method = method.shallowCopy();				method.setStaticScope((AbstractMemberContainer) firstMember);			}			lambda = (AbstractLambda) method;		}		else if ( e.hasMoreElements() )			throw new MendelException("Member lookup cannot have parameters");		else return method;	}	else throw new MendelException("First argument to Apply is neither a Lambda nor a Collection");		if ( lambda.evaluateParameters() ) // subr		while ( e.hasMoreElements() )			paramThunks.pushBack(((AbstractThunk) e.nextElement()).evaluate(scope));	else while ( e.hasMoreElements() ) // fsubr		paramThunks.pushBack(e.nextElement());		AbstractMember retValue = lambda.call(scope, paramThunks);		return retValue;}public String toString () {	StringBuffer buf = new StringBuffer("( ");	Enumeration e = params.elements();	while ( e.hasMoreElements() )		buf.append( e.nextElement().toString() + " ");	return buf.toString() + ")";}}